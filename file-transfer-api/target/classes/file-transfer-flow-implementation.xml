<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:mulerequester="http://www.mulesoft.org/schema/mule/mulerequester" xmlns:file="http://www.mulesoft.org/schema/mule/file"
	xmlns:sftp="http://www.mulesoft.org/schema/mule/sftp" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:s3="http://www.mulesoft.org/schema/mule/s3" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/sftp http://www.mulesoft.org/schema/mule/sftp/current/mule-sftp.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/s3 http://www.mulesoft.org/schema/mule/s3/current/mule-s3.xsd
http://www.mulesoft.org/schema/mule/mulerequester http://www.mulesoft.org/schema/mule/mulerequester/current/mule-mulerequester.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd">
    <mulerequester:config name="Mule_Requester" doc:name="Mule Requester"/>
    <flow name="file-transfer-flow-implementationFlow">
        <json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
        <set-session-variable variableName="route" value="#[payload.route]" doc:name="Route"/>
        <set-session-variable variableName="fileName" value="#[payload.fileName]" doc:name="FileName"/>
        <logger message="101010101001010100101010010  #[sessionVars.fileName]" level="INFO" doc:name="Logger"/>
        <choice doc:name="Choice">
            <when expression="#[sessionVars.route == &quot;sftp_to_s3&quot;]">
                <flow-ref name="SFTP_To_S3" doc:name="SFTP_To_S3"/>
            </when>
            <when expression="#[sessionVars.route == &quot;s3_to_sftp&quot;]">
                <flow-ref name="S3_To_SFTP" doc:name="S3_To_SFTP"/>
            </when>
            <otherwise>
                <set-variable variableName="invalidRouteErrorMessage" value="Invalid route selected: &quot;#[sessionVars.route]&quot;, accepted routes &quot;sftp_to_s3&quot;, &quot;s3_to_sftp&quot;" doc:name="ErrorMessage"/>
                <scripting:transformer doc:name="Groovy">
                    <scripting:script engine="Groovy"><![CDATA[throw new Exception(flowVars.invalidRouteErrorMessage)]]></scripting:script>
                </scripting:transformer>
            </otherwise>
        </choice>
    </flow>
    <sub-flow name="S3_To_SFTP">
        <s3:get-object-content config-ref="API_Amazon_S3__Configuration" bucketName="${amazon.bucket}" key="#[sessionVars.fileName]" doc:name="Amazon S3"/>
        <set-variable variableName="InboundFile" value="#[payload]" doc:name="InboundFile"/>
        <set-payload value="#[flowVars.InboundFile]" doc:name="Set Payload"/>
        <sftp:outbound-endpoint exchange-pattern="one-way" connector-ref="SFTPOutboundConnector" outputPattern="#[sessionVars.fileName]" host="${sftp.host}" port="${sftp.port}" path="${sftp.path}" user="${sftp.user}" password="${sftp.password}" responseTimeout="10000" doc:name="SFTP"/>
    </sub-flow>
    <sub-flow name="SFTP_To_S3">
        <set-session-variable variableName="sftpURL" value="sftp://${sftp.user}:${sftp.password}@${sftp.host}:${sftp.port}/${sftp.path}?connector=SFTPInboundConnector" doc:name="URL"/>
    <scripting:transformer doc:name="Groovy">
            <scripting:script engine="Groovy">
                <scripting:text><![CDATA[
                    def endpointBuilder = muleContext.endpointFactory.getEndpointBuilder(sessionVars['sftpURL']) 
                    endpointBuilder.addMessageProcessor(new org.mule.routing.MessageFilter(new org.mule.transport.file.filters.FilenameWildcardFilter(sessionVars['fileName']))) 
                    def inboundEndpoint = endpointBuilder.buildInboundEndpoint() 
                    inboundEndpoint.request(3000L) 
                ]]></scripting:text>
            </scripting:script>
        </scripting:transformer>
        <choice doc:name="Choice">
            <when expression="#[payload != null]">
                <set-variable variableName="InboundFile" value="#[payload]" doc:name="InboundFile"/>
                <set-payload value="#[flowVars.InboundFile]" doc:name="Set Payload"/>
                <s3:create-object config-ref="API_Amazon_S3__Configuration" bucketName="${amazon.bucket}" key="#[sessionVars.fileName]" acl="BUCKET_OWNER_FULL_CONTROL" doc:name="Amazon S3"/>
            </when>
            <otherwise>
                <set-variable variableName="errorMessage" value="Couldn't retrieve file: #[sessionVars.fileName]" doc:name="ErrorMessage"/>
                <scripting:transformer doc:name="Groovy">
                    <scripting:script engine="Groovy"><![CDATA[throw new FileNotFoundException(flowVars.errorMessage)]]></scripting:script>
                </scripting:transformer>
            </otherwise>
        </choice>
    </sub-flow>
</mule>
